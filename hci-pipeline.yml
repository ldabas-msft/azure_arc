trigger:
  branches:
    include:
      - main  # adjust this to your main branch name
  paths:
    include:
      - azure_jumpstart_localbox/*

parameters:
- name: ResourceGroupName
  displayName: 'Resource Group Name'
  type: string
  default: 'localbox-pipeline-rg'
- name: AzureSubscription
  displayName: 'Azure Subscription'
  type: string
  default: 'HCIBox-ServiceConnection'
- name: githubAccount
  displayName: 'githubAccount'
  type: string
  default: 'ldabas-msft'
- name: githubBranch
  displayName: 'githubBranch'
  type: string
  default: 'main'

variables:
- group: hcibox-deployment
- name: ResourceGroupName
  value: ${{ parameters.ResourceGroupName }}
- name: githubAccount
  value: ${{ parameters.githubAccount }}
- name: githubBranch
  value: ${{ parameters.githubBranch }}

stages:
- stage: HCIBox_deployment
  displayName: 'Deploy LocalBox'
  jobs:
  - job: DeployPipeline
    displayName: 'Deploy Pipeline'
    timeoutInMinutes: 600  # Job-level timeout for the entire pipeline
    pool:
      name: 'localbox-pool'
      demands:
        - Agent.OS -equals Windows_NT

    steps:

    - task: AzurePowerShell@5
      displayName: 'Deploy resource group'
      inputs:
        azureSubscription: ${{ parameters.AzureSubscription }}
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true
        Inline: |
          Write-Host "Running deployment from machine $env:COMPUTERNAME"
          # Add TLS 1.2 support
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          
          # Import Az modules explicitly
          Import-Module Az.Accounts
          Import-Module Az.Resources
          Write-Host "Running deployment from machine $env:COMPUTERNAME"
          $RGname = "$(ResourceGroupName)"
          New-AzResourceGroup -Name $RGname -Location "westeurope" -Force
          
    - task: AzurePowerShell@5
      displayName: 'Deploy Bicep template'
      timeoutInMinutes: 60  # Task-level timeout for this specific task
      inputs:
        azureSubscription: ${{ parameters.AzureSubscription }}
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          Write-Host "Deploying to $(ResourceGroupName)"
          $githubAccount = "$(githubAccount)"
          $githubBranch = "$(githubBranch)"
          
          # Set the current location to the repository root
          Set-Location $(Build.SourcesDirectory)
          
          # Check if we need to clone the repository
          $bicepPath = "azure_jumpstart_hcibox/bicep/main.bicep"
          if (-not (Test-Path $bicepPath)) {
              Write-Host "Bicep file not found at default path, attempting to clone repository..."
              if ($githubAccount -ne "microsoft") {
                  Write-Host "Checking out $githubAccount/$githubBranch"
                  # Use HTTPS with PAT
                  $pat = "$(GITHUB_PAT)"  # Add this to your pipeline variables
                  $repoUrl = "https://raw.githubusercontent.com/${githubAccount}/azure_jumpstart_localbox/${githubBranch}"

                  # For git operations, we still need the .git URL
                  $gitRepoUrl = "https://$($pat)@github.com/${githubAccount}/azure_jumpstart_localbox.git"

                  git config --global user.email "pipeline@jumpstart.com"
                  git config --global user.name "HCIBox Pipeline"

                  # Force the git operations
                  git remote remove upstream 2>$null
                  git remote add upstream $gitRepoUrl
                  git fetch upstream --quiet
                  git checkout -f -B $githubBranch upstream/$githubBranch --quiet
              }
          }

          # Verify the bicep file exists after potential clone
          if (-not (Test-Path $bicepPath)) {
              Write-Error "Bicep file not found at: $bicepPath"
              exit 1
          }
          
          Write-Host "Using bicep file at: $bicepPath"
          
          New-AzResourceGroupDeployment -Name HCIBox `
            -ResourceGroupName $(ResourceGroupName) `
            -TemplateFile $bicepPath `
            -TemplateParameterObject @{
              spnClientId = "$(spnClientId)"
              spnClientSecret = "$(spnClientSecret)"
              spnTenantId = "$(spnTenantId)"
              spnProviderId = "$(spnProviderId)"
              windowsAdminUsername = "arcdemo"
              windowsAdminPassword = "$(windowsAdminPassword)"
              logAnalyticsWorkspaceName = "HCIBox-Workspace"
              deployBastion = $false
              autoDeployClusterResource = $true
              autoUpgradeClusterResource = $false
              githubAccount = "$(githubAccount)"
              githubBranch = "$(githubBranch)"
              location = "westeurope"
              governResourceTags = $true
              vmAutologon = $true
            }

    - task: AzurePowerShell@5
      displayName: 'Wait for Deployment'
      condition: succeeded()
      inputs:
        azureSubscription: ${{ parameters.AzureSubscription }}
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          Write-Host "Waiting for Deployment..."
          Start-Sleep -Seconds 21600  # 1500 sec for testing
          Write-Host "Wait complete!"

    - task: AzurePowerShell@5
      displayName: 'Assign Storage Blob Data Contributor role at resource group level'
      inputs:
        azureSubscription: ${{ parameters.AzureSubscription }}
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          # Get the resource group
          $resourceGroup = Get-AzResourceGroup -Name "$(ResourceGroupName)"
          Write-Host "Resource Group: $($resourceGroup.ResourceGroupName)"
          
          # Get the VM and its managed identity principal ID
          $vm = Get-AzVM -Name "HCIBox-Client" -ResourceGroupName "$(ResourceGroupName)"
          $clientObjectId = $vm.Identity.PrincipalId
          
          if (!$clientObjectId) {
              Write-Error "No managed identity found on HCIBox-Client VM. Make sure the VM has a system-assigned identity."
              exit 1
          }
          
          Write-Host "VM Identity Object ID: $clientObjectId"
          
          # Assign at resource group level which covers all storage accounts
          Write-Host "Assigning Storage Blob Data Contributor role to VM identity at resource group level"
          $roleAssignment = New-AzRoleAssignment -ObjectId $clientObjectId `
                           -RoleDefinitionName "Storage Blob Data Contributor" `
                           -Scope $resourceGroup.ResourceId `
                           -ErrorAction SilentlyContinue
                           
          if ($roleAssignment) {
              Write-Host "Role assignment created successfully at resource group level" -ForegroundColor Green
          } else {
              Write-Host "Role assignment may already exist or failed at resource group level" -ForegroundColor Yellow
          }
          
          Write-Host "Waiting 20 seconds for role assignment to propagate..."
          Start-Sleep -Seconds 20
          Write-Host "Role assignment wait complete"
    
    - task: AzurePowerShell@5
      displayName: 'Upload Pester test-results from HCIBox VM'
      inputs:
        azureSubscription: ${{ parameters.AzureSubscription }}
        ScriptType: FilePath
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: 'azure_jumpstart_localbox/artifacts/PowerShell/Wait-LocalBoxDeployment.ps1'
        ScriptArguments: -ResourceGroupName $(ResourceGroupName) -SubscriptionId $(subscriptionId) -TenantId $(spnTenantId) -ClientId $(spnClientId) -ClientSecret $(spnClientSecret) -Verbose

    - task: AzurePowerShell@5
      displayName: 'Download Pester test-results from storage account to pipeline agent'
      inputs:
        azureSubscription: ${{ parameters.AzureSubscription }}
        ScriptType: FilePath
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: 'azure_jumpstart_localbox/artifacts/PowerShell/Get-PesterResult.ps1'
        ScriptArguments: -ResourceGroupName $(ResourceGroupName)

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: '$(System.DefaultWorkingDirectory)/testresults/*.xml'
    
    - task: AzurePowerShell@5
      displayName: 'Delete resource group - successful run'
      condition: succeeded() # Will only run if all previous tasks succeed
      inputs:
        azureSubscription: ${{ parameters.AzureSubscription }}
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          Write-Host "Tests passed - Deleting resource group $(ResourceGroupName)"
          Remove-AzResourceGroup -Name "$(ResourceGroupName)" -Force
          
- stage: destroy
  displayName: 'HCIBox_teardown'
  dependsOn: HCIBox_deployment
  condition: failed('HCIBox_deployment')
  jobs:
  - deployment: GetApproval  # Adding explicit name
    displayName: "Get approval for cleanup"
    environment: 'hcibox_teardown_approval'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo "Approval granted for teardown"
  - job: Delete
    dependsOn: GetApproval  # Now referencing the explicit name
    steps:
    - task: AzurePowerShell@5
      displayName: 'Delete resource group after approval'
      inputs:
        azureSubscription: ${{ parameters.AzureSubscription }}
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          Write-Host "Tests failed but cleanup approved - Deleting resource group $(ResourceGroupName)"
          Remove-AzResourceGroup -Name "$(ResourceGroupName)" -Force